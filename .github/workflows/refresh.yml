name: Refresh Package and Update Logs

on:
  push:
    branches:
      - main  # 当代码推送到 main 分支时触发工作流

jobs:
  refresh:
    runs-on: ubuntu-latest

    steps:
      # Step 1: 检出仓库代码
      - name: Checkout repository
        uses: actions/checkout@v2

      # Step 2: 更新版本、更新日志和控制文件
      - name: Update version, changelog, and control file
        run: |
          # 获取最新的 tag 版本号
          VERSION=$(git describe --tags --abbrev=0)

          # 获取当前日期
          DATE=$(date +'%Y-%m-%d')

          # 更新日志的描述 (可以根据实际更新内容修改)
          CHANGELOG="Updated for version $VERSION with the following changes."

          # 新的 deb 包描述
          DESCRIPTION="Updated description for version $VERSION of the package."

          # Step 2.1: 更新 js.json 文件（更新日志）
          jq '.updates += [{"version": "'$VERSION'", "date": "'$DATE'", "description": "'$CHANGELOG'"}]' depictions/js.json > depictions/js_tmp.json
          mv depictions/js_tmp.json depictions/js.json

          # Step 2.2: 更新 DEBIAN/control 文件（.deb 包描述）
          sed -i "s/^Version:.*/Version: $VERSION/" DEBIAN/control
          sed -i "s/^Description:.*/Description: $DESCRIPTION/" DEBIAN/control

      # Step 3: 提交和推送更改
      - name: Commit changes
        run: |
          git config --global user.name 'GitHub Action'
          git config --global user.email 'action@github.com'
          git add depictions/js.json DEBIAN/control
          git commit -m "Update changelog and control file for version $VERSION"
          git push origin main

      # Step 4: 重新打包 .deb 文件
      - name: Rebuild deb package
        run: |
          dpkg-deb --build path_to_your_deb_folder

      # Step 5: 可选：上传新生成的 .deb 文件（可以保留你之前的上传逻辑）
      - name: Upload deb package
        uses: actions/upload-artifact@v2
        with:
          name: my-deb-package
          path: path_to_your_deb_folder/output.deb

      # Step 6: 可选：其他你之前的功能
      # 如果你之前还有其他步骤，比如通知、清理缓存等，可以在此添加。
